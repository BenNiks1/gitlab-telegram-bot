#!/usr/bin/env python3

import json
from flask import Flask, request, jsonify
from bot import Bot
import jinja2
import os
from config import AUTH_MSG, TOKEN

app = Flask(__name__)

class GitlabBot(Bot):
    def __init__(self):
        self.authmsg = AUTH_MSG
        super(GitlabBot, self).__init__(TOKEN)
        self.chats = {}
        try:
            with open('chats', 'r') as f:
                self.chats = json.loads(f.read())
        except FileNotFoundError:
            with open('chats', 'w') as f:
                f.write(json.dumps(self.chats))
        self.send_to_all('Hi !')

    def text_recv(self, txt, chatid):
        ''' registering chats '''
        txt = txt.strip()
        if txt.startswith('/'):
            txt = txt[1:]
        if txt == self.authmsg:
            if str(chatid) in self.chats:
                self.reply(chatid, "\U0001F60E  –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
            else:
                self.reply(chatid, "\U0001F60E  –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                self.chats[chatid] = True
                with open('chats', 'w') as f:
                    f.write(json.dumps(self.chats))
        elif txt == 'shutupbot':
            del self.chats[chatid]
            self.reply(chatid, "\U0001F63F –ò–∑–≤–∏–Ω–∏.")
            with open('chats', 'w') as f:
                f.write(json.dumps(self.chats))
        else:
            self.reply(chatid, "\U0001F612 –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    def send_to_all(self, msg):
        print(self.chats)
        for c in self.chats:
            self.reply(c, msg, parse_mode='HTML')

b = GitlabBot()

environment = jinja2.Environment()

template = environment.from_string(
    '<a href="{{link}}">{{name}} - {{title}}</a> \n\n{{source_branch}} -> {{target_branch}} \n\nüë®üíª: {{user}}'
)

def requestStatus(status):
    if status == 'open':
        return '‚≠ê –ù–æ–≤—ã–π –ú–†'
    elif status == 'close':
        return 'ü™≥ –ú–† —É–¥–∞–ª–µ–Ω'
    elif status == 'update':
        return '‚úçüèª –í–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è'
    elif status == 'reopen':
        return 'ü§° –ú–† –≤–Ω–æ–≤—å –æ—Ç–∫—Ä—ã—Ç'
    elif status == 'merge':
        return 'üö£üèæ –ó–∞–ª–∏—Ç–æ'

def templateRender(type, title, data):
    if type == 'mr':
        return title + "\n" + template.render(
            name=data['project']['name'],
            link=data['object_attributes']['url'],
            title=data['object_attributes']['title'],
            source_branch=data['object_attributes']['source_branch'],
            target_branch=data['object_attributes']['target_branch'],
            user=data['user']['name']
        )
    else:
        return title + "\n" + template.render(
            name=data['project']['name'],
            link=data['object_attributes']['url'],
            title=data['merge_request']['title'],
            source_branch=data['merge_request']['source_branch'],
            target_branch=data['merge_request']['target_branch'],
            user=data['user']['name'],
            comment='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ' + data['object_attributes']['note']
        )

@app.route("/", methods=['GET', 'POST'])
def webhook():
    data = request.json
    print(data)  # Inspect the payload structure in your logs

    kind = data['object_kind']
    if kind == 'merge_request':
        msg = templateRender('mr', requestStatus(data['object_attributes']['action']), data)
    elif kind == 'note':
        msg = generateCommentMsg(data)
    # TODO: –º–± –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π   
    b.send_to_all(msg)
    return jsonify({'status': 'ok'})

def generateCommentMsg(data):
    print(data)
    ntype = data['object_attributes']['noteable_type']
    if ntype == 'Commit':
        msg = templateRender('comment', 'ü™É –ù–æ–≤—ã–π –∫–æ–º–º–∏—Ç', data)
    elif ntype == 'MergeRequest':
        msg = templateRender('comment', 'ü™É –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', data)
    elif ntype == 'Issue':
        msg = templateRender('comment', 'ü™É', data)
    return msg

if __name__ == "__main__":
    b.run_threaded()
    app.run(host='0.0.0.0', port=10111)
